
Delar: 

* Vad SSG är för någonting


I väldigt grova drag är statiska webside generatorer mjukvara som tar text och mallar (templates), och skapar html-filer. Dem här html-filerna, och andra filer som skapas sammtidigt, används till att skapa så kallade statiska hemsidor. Det finns ett ofantligt stort antal olika ssg:er(?) ute för användning för tillfället, och dem blir bara mer och mer populära i och med att dem allra flesta är helt gratis och lättillgängliga. Dem flesta ssg:erna är fil-baserade och utan behov av en databas, vilket skapar en ny intressant marknad fär privatpersoner som vill skapa någonting på ett effektivt och enkelt sätt. Och just att det ska vara enkelt att använda sig av är en stor grundpelare för utvecklare av ssg:er, då det kommer att lämna mer rum för användare att vara kreativa istället för att behöva hankas med tekniska problem. Utbudet är stort när det kommer till variation, med en mix av många olika språk, där dem populäraste språken är Ruby och Python. 


---------------------------------------------
* Fördelar med att använda SSG

* Man kan snabbt bygga upp en hemsida. Eftersom mycket funktionalitet redan finns tillgänglig i och med ssg:en kan man med hjälp av intruktioner sätta upp en hemsida pä ett snabbt och effektivt sätt.
* Billigt att bygga upp en hemsida. Näst intill alla ssg:er är gratis att använda, vissa är även öppen källkod, med en rad olika tillägg och plug-ins, lägg även till att dem är utan datorbas och utan behov av annan programvara som kostar licens, blir kostnaden av att skapa en hemsida väldigt billig.
* Som sagt utan behov av datorbas är en statisk hemsida även billigare att hosta.  


---------------------------------------------
* Nackdelar med att använda SSG

* Det blir svårare och krångligare att uppdatera innehåll på en hemsida. Dessutom behöver man webbprogrammeringskunskap eftersom om man inte vill omgenerera hela hemsidan måste man in i html-filerna och ändra själv. Det blir därför lätt att information pä hemsidan inte uppdateras lika ofta eftersom det krävs ganska mycket extra arbete.
* En statiskt hemsida är inte lika användarvänlig som en dynamisk. Det är också svårare att göra den interaktiv, så statiska hemsidor passar bättre när deras ända mål är att sprida information. 

---------------------------------------------
* Dem största användningsområderna (Personal site, blog or wiki)

Det absolut stårsta användingsområde för en ssg är när en privatperson vill ha en egen hemsida, för här passar alla fördelarna av en ssg och en statiskt hemsida in, i dem flesta fallen, perfekt. Speciellt när man kollar in privatpersoners egna bloggar så är en stor majoritet genererade från ssg:atorer. I stort sätt alla sidor där informationen på sidan är det viktigaste passar statiska sidor bra, så även på wikis eller andra sidor som vill tilldela information om t.ex. en produkt eller programm. Det skulle även att fungera bra om man vill göra ett interaktivt demo av något slag. 
En blogg visar styrkan av att skapa en statiskt hemsida. Med en dynamisk hemsida skulle det behövas monteras en ny sida från mallar och innehåll från en databas, varje gång man gör ett anrop till servern. Detta bara lägger till komplexitet, prestandaproblem och säkerhetsproblem för en blogghemsida. Eftersom innehållet på hemsidan inte behövs ändras förran upphovsmannen bestämmer för att ändra det, så skulle en dynamisk sida bara lägga till problem. 


---------------------------------------------
* Dem bästa exemplerna, samt en kortare fördjupning i en speciell SSG

En populär ssg heter Jekyll. Den kappslar in alla fördelarna med en ssg på ett väldigt bra sätt. Kolla man in Jekylls hemsida så finns det tre stycken slagord, enkelt, statiskt och blogg-medveten. I grunden är Jekyll en text-transformationsmotor. Konceptet med Jekyll är att man har text skriven i ett markup-språk, som t.ex. markdown, textile eller ren html, sedan kör systemet texten genom en layout eller flera layout-filer. Layouten fungerar som en mall som kapslar in texten man vill visa på sidan. För detta använder Jekyll sig av ett mall-språk som heter Liquid som hanterar alla mallar. Mycket av inkappslingen av text består av att Liquid-taggar, som t.ex. mustach-taggar, trycker in innehåll till webbsidan. Så i slutet bestämms allt av det du redigerar i textfiler, t.ex. vilken data som visas vart i layouten. Just Jekyll har en annan fördel över andra ssg:er, och det är Github Pages, en tjänst som tillåter användare att hosta en hemsida direkt frän Github. Github Pages är driven av Jekyll sä man kan lätt sätta upp en hemsida direkt genom Github.

 
---------------------------------------------

* Hur vet man vilken ssg som är bäst?

Som sagt finns det ofantligt många olika ssg:er, och populariteten bara stiger så utbudet kommer att öka ytterligare. Hur vet man då vilken ssg som är bäst för ens egens behov? Det enda man kan göra är att läsa på, eftersom det inte finns en specifik ssg som passar till alla behov. Men i och med det stora utbudet kan man lätt bli vilse och det känns som att man inte får några vettiga svar alls. Ett bra sätt att få kontroll på det hela är att kolla in olika listor som kunniga personer har satt ihop, just för den som känner sig överväldigad. En speciallt bra hemsida med detta syfte är StaticGen. Här rangordnas många olika open-source ssg:er. Vid första anblicken får man information som t.ex. språk, templates och licens. Dem olika ssg:erna rangordnas efter hur många stjärnor dem har, och man kan även se hur många forks dem har samt hur många så kallade öppna problem, alltsä kända buggar, dem har. Sist finns det även en väldigt kort beskrivning av ssg:en för att hjälpa till beslutet om vilken man finner vara bäst. Om man sedan vill ha en ssg med ett specifikt språk kan man söka efter detta och andra krav, för att göra det ännu enklare att hitta den bästa som passar bäst.    




















